services:

  web:
    container_name: web
    restart: unless-stopped
    build:
      context: .
      dockerfile: ./docker/web/Dockerfile
    image: linkedin_poster_web
    ports:
      - "8000:8000"
    volumes:
      - .:/app
    env_file:
      - .env
    command: >
      sh -c "python /app/src/manage.py wait_for_db &&
             python /app/src/manage.py migrate &&
             python /app/src/manage.py runserver 0.0.0.0:8000"
    networks:
      - internal-network

  db:
    container_name: db
    restart: unless-stopped
    image: postgres:16-alpine
    ports:
      - "15432:5432"
    volumes:
      - local-db-data:/var/lib/postgresql/data
    env_file:
      - .env
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U $${POSTGRES_USER}"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s
    networks:
      - internal-network

volumes:
  local-db-data:

networks:
  internal-network:
    driver: bridge
